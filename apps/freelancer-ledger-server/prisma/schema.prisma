datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  status           EnumProjectStatus?
  title            String?
  budget           Float?
  paymentDetails   String?
  description      String?
  user             User?              @relation(fields: [userId], references: [id])
  userId           String?
  financialRecords FinancialRecord[]
  notifications    Notification[]
}

model UserProfile {
  id            String                  @id @default(cuid())
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  profileImage  Json?
  earnings      Float?
  bio           String?
  skills        EnumUserProfileSkills[]
  totalProjects Int?
  user          User?                   @relation(fields: [userId], references: [id])
  userId        String?
}

model FinancialRecord {
  id         String                     @id @default(cuid())
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
  amount     Float?
  status     EnumFinancialRecordStatus?
  receivedAt DateTime?
  dueAt      DateTime?
  project    Project?                   @relation(fields: [projectId], references: [id])
  projectId  String?
}

model Dashboard {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  receivedPayments Int?
  totalProjects    Int?
  totalEarnings    Float?
  pendingPayments  Int?
}

model Notification {
  id        String                     @id @default(cuid())
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
  message   String?
  dueAt     DateTime?
  typeField EnumNotificationTypeField?
  user      User?                      @relation(fields: [userId], references: [id])
  userId    String?
  project   Project?                   @relation(fields: [projectId], references: [id])
  projectId String?
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  firstName     String?
  lastName      String?
  username      String         @unique
  email         String?        @unique
  password      String
  roles         Json
  userProfiles  UserProfile[]
  projects      Project[]
  notifications Notification[]
}

enum EnumProjectStatus {
  Option1
}

enum EnumUserProfileSkills {
  Option1
}

enum EnumFinancialRecordStatus {
  Option1
}

enum EnumNotificationTypeField {
  Option1
}
