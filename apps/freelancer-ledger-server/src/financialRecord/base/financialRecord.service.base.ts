/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FinancialRecord as PrismaFinancialRecord,
  Project as PrismaProject,
} from "@prisma/client";

export class FinancialRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancialRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financialRecord.count(args);
  }

  async financialRecords(
    args: Prisma.FinancialRecordFindManyArgs
  ): Promise<PrismaFinancialRecord[]> {
    return this.prisma.financialRecord.findMany(args);
  }
  async financialRecord(
    args: Prisma.FinancialRecordFindUniqueArgs
  ): Promise<PrismaFinancialRecord | null> {
    return this.prisma.financialRecord.findUnique(args);
  }
  async createFinancialRecord(
    args: Prisma.FinancialRecordCreateArgs
  ): Promise<PrismaFinancialRecord> {
    return this.prisma.financialRecord.create(args);
  }
  async updateFinancialRecord(
    args: Prisma.FinancialRecordUpdateArgs
  ): Promise<PrismaFinancialRecord> {
    return this.prisma.financialRecord.update(args);
  }
  async deleteFinancialRecord(
    args: Prisma.FinancialRecordDeleteArgs
  ): Promise<PrismaFinancialRecord> {
    return this.prisma.financialRecord.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.financialRecord
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
